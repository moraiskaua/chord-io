datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?

  accounts Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Session         Session[]
  Authenticator   Authenticator[]
  DailyChord      DailyChord[]
  FreeModeAttempt FreeModeAttempt[]
  Stats           UserStats?
  GameStates      GameState[]
  GameResults     GameResult[]

  @@map("users")
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  credentialID         String  @unique
  userId               String  @db.Uuid
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model DailyChord {
  userId     String   @db.Uuid
  date       DateTime @db.Timestamp
  chordRoot  String
  chordType  String
  isCorrect  Boolean
  timeTaken  Int
  difficulty String   @default("easy")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, date, difficulty])
  @@map("daily_chords")
}

model FreeModeAttempt {
  id         String  @id @default(uuid()) @db.Uuid
  userId     String  @db.Uuid
  chordRoot  String
  chordType  String
  userAnswer String
  isCorrect  Boolean
  timeTaken  Int
  complexity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("free_mode_attempts")
}

model UserStats {
  userId        String   @id @db.Uuid
  totalCorrect  Int      @default(0)
  totalAttempts Int      @default(0)
  dailyStreak   Int      @default(0)
  avgTime       Float?   @default(0)
  bestDailyTime Int?
  lastAttempt   DateTime @db.Timestamp

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_stats")
}

model GameState {
  userId     String   @db.Uuid
  difficulty String
  attempts   Int      @default(0)
  isPlaying  Boolean  @default(false)
  gameOver   Boolean  @default(false)
  score      Int      @default(0)
  time       Int      @default(0)
  date       DateTime @db.Timestamp

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, difficulty, date])
  @@map("game_states")
}

model GameResult {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  score      Int
  timeTaken  Int
  difficulty String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("game_results")
}
